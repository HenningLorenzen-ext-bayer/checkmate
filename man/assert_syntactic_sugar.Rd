% Generated by roxygen2 (4.0.1): do not edit by hand
\name{assert_syntactic_sugar}
\alias{achar}
\alias{acharvec}
\alias{achoice}
\alias{acount0}
\alias{acount1}
\alias{adir}
\alias{afactor}
\alias{afile}
\alias{afun}
\alias{aint}
\alias{aintvec}
\alias{alist}
\alias{alistn}
\alias{alistnu}
\alias{alog}
\alias{alogvec}
\alias{anum}
\alias{anump}
\alias{anumvec}
\alias{aobj}
\alias{assert_syntactic_sugar}
\alias{asubset}
\title{Syntactic sugar to make the most common asserts as simple as possible.}
\usage{
alog(x)

anum(x, lower = -Inf, upper = Inf)

anump(x, upper = Inf)

aint(x)

acount0(x, upper)

acount1(x, upper)

achar(x)

alogvec(x)

anumvec(x, lower = -Inf, upper = Inf)

aintvec(x, lower = -Inf, upper = Inf)

acharvec(x)

afactor(x)

afun(x, args)

aobj(x, classes)

achoice(x, choices)

asubset(x, choices)

alist(x, types)

alistn(x, types)

alistnu(x, types)

afile(x)

adir(x)
}
\arguments{
\item{x}{[any]\cr
The object we assert something about.}

\item{args}{[\code{character}]\cr
See \code{\link{check_function}}.}

\item{types}{[\code{character}]\cr
See \code{\link{check_list}}.}

\item{choices}{[\code{atomic}]\cr
See \code{\link{check_choice}}.}

\item{lower}{[\code{numeric} | \code{integer}]\cr
See \code{\link{check_numeric}} and \code{\link{check_integerish}}.}

\item{upper}{[\code{numeric} | \code{integer}]\cr
See \code{\link{check_numeric}} and \code{\link{check_integerish}}.}

\item{classes}{[\code{character}]\cr
See \code{\link{check_class}}.}
}
\value{
If the assertion is not passed, an exception is thrown with an informative error message.
  Other \code{x} is returned, possibly SLIGHTLY converted to a correct class.
  Currently this means to convert integerish numbers to true integers.
}
\description{
Syntactic sugar to make the most common asserts as simple as possible.

\code{aflag, alog}: Assert a boolean non-NA flag.

\code{anum}: Assert a numeric non-NA scalar.

\code{anump}: Assert a positive numeric non-NA scalar.

\code{aint}: Assert a integerish non-NA scalar.

\code{acount0}: Assert a non-NA count >= 0.

\code{acount1}: Assert a non-NA count >= 1.

\code{astring, achar}: Assert a non-NA string.

\code{alogvec}: Assert an non-NA logical vector.

\code{anumvec}: Assert an non-NA numeric vector.

\code{aintvec}: Assert an non-NA integerish vector.

\code{acharvec}: Assert an non-NA character vector.

\code{afactor}: Assert an non-NA factor.

\code{afun}: Assert a function.

\code{aobj}: Assert an object that is of at least one of the given classes.

\code{achoice}: Assert an object that matches exactly one of the given atomic choices.

\code{asubset}: Assert that we have a subset of some atomic choices.

\code{alist}: Assert a list.

\code{alistn}: Assert a list, named.

\code{alistnu}: Assert a list, uniquely named.

\code{afile}: Assert an existing file path.

\code{adir}: Assert an existing directory path.
}

