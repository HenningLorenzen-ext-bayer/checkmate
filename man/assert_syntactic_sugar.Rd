% Generated by roxygen2 (4.0.1): do not edit by hand
\name{assert_syntactic_sugar}
\alias{achoice}
\alias{acount0}
\alias{acount1}
\alias{adir}
\alias{afile}
\alias{aflag}
\alias{afun}
\alias{aint}
\alias{aintvec}
\alias{alist}
\alias{alistn}
\alias{alistnu}
\alias{anump}
\alias{anumvec}
\alias{aobj}
\alias{assert_syntactic_sugar}
\alias{astring}
\title{Syntactic sugar to make the most common asserts as simple as possible.}
\usage{
aflag(x)

anump(x, upper = Inf)

aint(x)

acount0(x, upper)

acount1(x, upper)

astring(x)

afun(x, args)

aobj(x, cl)

achoice(x, choices)

anumvec(x)

aintvec(x)

alist(x, types)

alistn(x, types)

alistnu(x, types)

afile(x)

adir(x)
}
\arguments{
\item{x}{[any]\cr
The object we assert something about.}

\item{args}{[\code{character}]\cr
See \code{\link{check_function}}.}

\item{types}{[\code{character}]\cr
See \code{\link{check_list}}.}

\item{choices}{[\code{atomic}]\cr
See \code{\link{check_choice}}.}

\item{upper}{[\code{numeric} | \code{integer}]\cr
See \code{\link{check_numeric}} and \code{\link{check_integerish}}.}
}
\value{
If the assertion is not passed, an exception is thrown with an informative error message.
  Other \code{x} is returned, possibly SLIGHTLY converted to a correct class.
  Currently this means to convert integerish numbers to true integers.
}
\description{
Syntactic sugar to make the most common asserts as simple as possible.
}

